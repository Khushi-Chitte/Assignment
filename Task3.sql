

--------------------------------------------Task 3---------------------------------------------------

USE TicketBookingSystem;

--Task3 Q1 List Events and Their Average Ticket Prices
SELECT event_name, AVG(ticket_price) AS average_ticket_price
FROM Event
GROUP BY event_name

--Task3 Q2 Calculate the Total Revenue Generated by Events.
SELECT E.event_name, SUM(total_cost) AS total_revenue
FROM Event E
INNER JOIN Booking B
ON E.event_id = B.event_id
GROUP BY event_name;

--Task3 Q3 find the event with the highest ticket sales
SELECT TOP 1 E.event_name, SUM(B.num_tickets) AS ticket_sales
FROM Event E
INNER JOIN Booking B
ON E.event_id = B.event_id
GROUP BY E.event_name
ORDER BY ticket_sales DESC;


--Task3 Q4 Calculate the Total Number of Tickets Sold for Each Event
SELECT E.event_name, SUM(B.num_tickets) AS tickets_sold
FROM Event E
INNER JOIN Booking B
ON E.event_id = B.event_id
GROUP BY event_name;


--Task3 Q5 Find Events with No Ticket Sales
SELECT event_name
FROM Event E
LEFT JOIN 
Booking B ON E.event_id = B.event_id
WHERE B.booking_id IS NULL;


--Task3 Q6 Find the User Who Has Booked the Most Tickets
SELECT TOP 1 C.customer_name, SUM(B.num_tickets) AS most_tickets
FROM Customer C
INNER JOIN Booking B
ON C.customer_id = B.customer_id
GROUP BY C.customer_name
ORDER BY most_tickets DESC



--Task3 Q7 List Events and the total number of tickets sold for each monthSELECT 
FORMAT(E.event_date, 'MM') AS event_month,
E.event_name,
SUM(B.num_tickets) AS total_tickets_sold
FROM Booking B
JOIN 
Event E ON B.event_id = E.event_id
GROUP BY 
FORMAT(E.event_date, 'MM'), E.event_name;


--Task3 Q8 calculate the average Ticket Price for Events in Each Venue
SELECT V.venue_name, AVG(E.ticket_price) AS average_ticket_price
FROM Venu V
INNER JOIN Event E
ON V.venue_id = E.venue_id
GROUP BY V.venue_name


--Task3 Q9 calculate the total Number of Tickets Sold for Each Event Type
SELECT E.event_type, SUM(B.num_tickets) AS total_tickets_sold
FROM Booking B
INNER JOIN 
Event E ON B.event_id = E.event_id
GROUP BY E.event_type;


--Task3 Q10 calculate the total Revenue Generated by Events in Each Year
SELECT YEAR(E.event_date) AS event_year, SUM(B.total_cost) AS total_revenue
FROM Booking B
JOIN 
Event E ON B.event_id = E.event_id
GROUP BY YEAR(E.event_date);


--Task3 Q11 list users who have booked tickets for multiple events
SELECT C.customer_name, COUNT(DISTINCT B.event_id) AS events_booked
FROM Customer C
JOIN 
Booking B ON C.customer_id = B.customer_id
GROUP BY C.customer_name
HAVING COUNT(DISTINCT B.event_id) > 1;


--Task3 Q12 calculate the Total Revenue Generated by Events for Each User
SELECT C.customer_name, SUM(B.total_cost) AS total_revenue
FROM Customer C
INNER JOIN Booking B ON C.customer_id = B.customer_id
GROUP BY C.customer_name;


--Task3 Q13 calculate the Average Ticket Price for Events in Each Category and Venue
SELECT E.event_type,V.venue_name,
AVG(E.ticket_price) AS avg_ticket_price
FROM Event E
INNER JOIN 
Venu V ON E.venue_id = V.venue_id
GROUP BY E.event_type, V.venue_name;


--Task3 Q14 list Users and the Total Number of Tickets They've Purchased in the Last 30
SELECT C.customer_name, SUM(B.num_tickets) AS total_tickets
FROM Customer C
JOIN 
Booking B ON C.customer_id = B.customer_id
WHERE 
B.booking_date >= DATEADD(DAY, -30, GETDATE())
GROUP BY C.customer_name;



